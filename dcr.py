#!/bin/python
import os, sys, time, urllib
import zipfile

if not os.path.exists('dcpu'):
    if not os.path.exists('dcpu.jar.zip'):
        wh=urllib.urlopen('http://dcpu.com/highnerd/dcpu.jar').read()
        fh=open('dcpu.jar.zip', 'wb')
        fh.write(wh)
        fh.close()
    if not os.path.exists('dcpu\\computer'): os.makedirs('dcpu\\computer')
    fh = open('dcpu.jar.zip', 'rb')
    z = zipfile.ZipFile(fh)
    required=[u'computer/AWTKeyMapping.class', u'computer/DCPU$1$1.class',
              u'computer/DCPU$1.class', u'computer/DCPU$2.class',
              u'computer/DCPU.class', u'computer/DCPUApplet$1.class',
              u'computer/DCPUApplet.class', u'computer/font.png',
              u'computer/KeyMapping.class', u'computer/mem.dmp',
              u'computer/VirtualKeyboard.class', u'computer/VirtualMonitor.class']
    for name in z.namelist():
        if str(name) in required:
            outfile = open('dcpu\\'+str(name), 'wb')
            outfile.write(z.read(str(name)))
            outfile.close()
    fh.close()    

notches_sample_program='}\xc1\x003\x00C\x00o\x00n\x00g\x00r\x00a\x00t\x00u\x00l\x00a\x00t\x00i\x00o\x00n\x00s\x00,\x00 \x00y\x00o\x00u\x00 \x00f\x00o\x00u\x00n\x00d\x00 \x00t\x00h\x00e\x00 \x00c\x00o\x00r\x00r\x00e\x00c\x00t\x00 \x00b\x00i\x00t\x00 \x00o\x00r\x00d\x00e\x00r\x00!8\x01X\x0b\x01\x80|t\x03\x05\x9cr\x1c1\x908|6\x01\x80\x81<\x03\x00}\xc1\x00C}\xc1\x006\x012\x03\x00\x84b|m\x01\x80\x81\xc1\x80aYa\x80 \x03\x00\x81a\x03\x00\x84b|m\x00\xe0}\xc1\x00J\x80q\x80a\x1c1|6\x00\xc0|2\x03\xc0|\x01\x00_\x88\x02\x0c\x81Ya\x81@%C\x84b|m\x00 }\xc1\x00_\x84r|1\x03\x00\x80<}\xc1\x00U\x843}\xc1\x00j}\xc1\x00U\xf4\xfc6\x92\xc2j\x87\xf3v9\xc0 -\x1d\xec\x89"\xde\xba\x0e}\xd6\xfc\x1bDW\x10\xd4\x1e\xadW\x16>\xa1\xb5\xacH\x98\xfc+\x06\x13\xd1\x00\xee+\xc4|\xd1\xe1\x08T4\x81r\x87\xc9c~\xb0\xe7w\xa8\x1e\x14\xd1\xa2nq6hn \x83\xec\xb6=b\x1a7@\xbf\x95\x89L\x88\xe5\xf1\xfb:E\xd1n\xd0\xb8-\x8f\xbb\xcf\x10\xe3\xd6\xa3\xf4r@i\'Z\xd8/\xf0\x13ra^\xc8\xfa\xad\x85\xe0\x17-\xf3\xac\x8f\xcf[\xe1\xc9\x9d\xb7\xeb\x85\x9f9\xfa\xef/\x9a\xf9Q\xd5\xd5\xb1\xdcH\xeb\xadE\xacU\xc3_\xfe\x83\xa6\xba\x13\xae\xe8Y\xe3\xb6\'_\xf2\xe0\x04\x0c\xf5mo\xa0\x97\xe5>fW#Kz\xf1\x06\xce\x88~$)\xbe\xcad\xa2\x81Tz\xba\xbd\x1fZ\xda\x0bC\xb8?\xecU\xde\xaf\x1d_\x83\xe2\xab\xcc\xc9\xe8\xbf\xab\xb3/\x01\xb1\xca\x16\xcf\xc91.\rZt`\xcc\xf2\xe45\xd3\xf2?\xb2]\xd7\xed\xde{\xde\xa9\x16\\u\xb7R\xdb\xc0\xa2q\x10\xfa qI\x07\xad\xdcF\xff=\x9cz\x05^G\xf8&\xb9H\xc3\xd0-\xd1\x11uL\xfa\xf2\xd8+a"~\xb5\xb1\x198`\x86\x80\xdbpMx\xc1\x917\xe3\xda\x01>e\xc0Q\x11\xe2q{\r\xff5\xaf\x03\xba)=\xef\x95\xd0\xc9\xcb\xc6\xa6\x01\x99\xaaun\xcfh}\x16xA\x99\xd2\x05\xdf\xb0\t]\xf0\xb0\xae\xde@\x13c\x91\xa6.\xd7F(\xe6\xb5L\xecY\x18\x8d\xdb\x0109K\xd1\xc7\xa6\xa3X\xbe%p\x12\x97\xb6\xa0\xf0SR\x16o\xd4\xd18\xb8\xf0M\xb3\x93\xab\xa9\xd6\xeeP2\xc9K\x9c\xaf\x96p\x199\xd7\x15\x1bP,y\x95K;\xb1\xe7O\x12\x88\x03\x99\x89\xa5\xb2\x97\xf5\xd1X/\xb2_O\xa8\xf4.|\xd2z\xd4\x0fVv\x0b\xa1\x08H\xee_\xf7\xa1\xc2v\x9fv\xa5\xb5\xfc\x15\x9cR\x982?\x15\x01\x98\xb8\xcd\x06_\xbf\xe3\xff6\xc7"\xcfII\xdaK/)=9B\xfb\xdc\xae\x1f\xed\xf2\x1eQ9Bp\x89\x7f\x87aW]\xaf,2\xcb\xec\x94\xb4\xf7>\x012\x9f\xe7\xc4\xa2\x89\xa3\xbbMuF$\xc2\x93\x8d\x17O\xc9C\x9d\xe1\xf0R\xf0b\xf0\x03\xf0N\xf0F\xe0C\xe0A\xf0\x06\xd0U\xe0]\xe0A\xe0T\x80I\x80R\xe0N\xe0S\xe0\x0c\xe0\x00\xe0V\x80B\xe0U\xe0\x00\xe0Vp\x01\xe0U\xf0\x07\xe0D\xe0\x00\xf0\x07\xe0H\xf0\x0b\xe0\x00\xe0Sp@\xe0R\xf0R\xe0E\xd0C\xf0\x15\xf0I\xe0B\xf0Y\xe0T\xd0\x00\xf0\x16\xe0R\x80?\x80E\x80_\xe0\x01\xd8!\xb8+\x81\xa0\x9cT\xe35lB\xecT`L\x8cE\xd1\xa0QY\xe3 \x9d\xe1\x80c\xad\xe1\xe0\x16\x81\x12\xf3e\x04B\xfcM\xf1\xe7a\xe1p\x04\xb9QpT\xf3waA\xf3 t\x15\x8c\x02p\xc0\x8d\xb4\xe0j`Q`A\xec\x11\x8cD\x80\xe0\x9cQ\xe3\xe0\x8chp2x"\xec\xb1\xb9Aq)\xc5cdB\x9cB\xe0\x11\x8d\xe1\xe0\x7f\xf4\x1a\x8c\x11\x83 `\x1c\xad\xb4\xf04t\x13\x8d\xac\xe0J\x8d\xa4\xd0ut\xd1\xd6\xb2"Jg\xd3\x96\t0O\xad=\x0c\xa9\xc2\xfej.\x9d\xe6\x0cn\xc4z\xe0\xb1\xfe\x8d\xb76\xee\x81U\x8c\xa8\xb8\x0c\x0b\xf6wQ \x0e\x0b$\\\xa1\xce\xe8\x08\xd4\xa1\xf2\xda)C\x8e\xc4\x07WX>\xe4\xf1R\r\xa1\x16\x88N\xc0\xa3\x0c\x96\xbdB\xeaC\xa0\x9f\x15\xa9\xac\xb9\x05\xd1\x0bN5\xb2\x8e\xf0X\r\x7f\xd0/!\x13\xfa#\xd4\xa2`\x99I\xda\xf8\xcf\xd0\xe3\x17\x91\'8\x9f]\xe2\x90e\xdd\xd3L\xaf?{\x91\xa0m\x97\x1b\xec\x7fZ\x1a\xb3\xaf\xba\t?5\xf5\xc1\xac\xa8\xcb]bLe31\x8e\xebF\x9a\xe3\xde\x18y\x13\x96\xc7\x7f\x12\xc0\xe4o\x05M\x9f\xc1\xe7\x90\xbe[\xb7\x03\xabJ\x01&.\xa8\x9e\x14\xc9\x9e:\nr\xa1\xa4\x0eZ\x9d\xffz:+\xc3\x98\xcf\xcc\xa5\xb1\x7f!\xdf\xa3\x02\x8b<\xe5h\x9f[\xd6\xff-A\xa5\xe6\xef\x19H\xae-\xba\x17\xe0\xec\x12\xd4\xc5\xa6\x12\x1fRm7\xcd\xae[.\xcb\xf6|\x85\xd1\xa2\x8c \x82\x81|z\x00\x81 \xf7\xd5\\f\x1f\x1dl\x03\xd5~\x97\x82\xf6\x99\x98\xe3\x00\x1e11\x859\n\x81(Y\x81\x02\x9e\x95QA\xd8@v\xe1;@\xcdX!\xa1\xc7\xaa*o\xdeU0q\xc1\xc2\x91[\xed\xdfE\x8f\xd3\x9a\xc9\x0c\x0f\xb5 \xab+\xe6\xd6fy\x8a\x85\t\x1fH\x9du\xa8ai\xe3\xf5\xff`)\xad\x9c@\xcb>`\xe3Cq\x86\xce\xf7\xa6\x08\x16\x95\xbc\x99\xb98\r\xfbqT\xd9z1\xf7F\x83\xa8\xd1\xd5\x02\xf2\xb7F\x80\x10s\xa2~\x8f\xf41\x08X\xd0\x9d\xdcc\xceI\xf6\x0epB\xa6\xcb\xbc/\xb6\x909\xd9\xf7\xe5R\x80e\x99\xb5\xab\x1ba\xc7\xcf2h#i\xa9%\x9fg\xa51x\xcf\x92\xbfoX\x98\xce\\\xa2T4/\xb6F\xfb\x81\xe8x\x9e:\x07\x812\x15o\x17U\xc1\x0c4|b\x18\x12\xef5\xe1\xb8H\xbf\xf6(_\xc3\x7f\x1b\'\x02/i\xb9\xa9;L\xa9\x1d\xc9-\x1b\xfcN?\x1d\x9d\xee=\xc9!\x80\xed\x9f\xa7\x81w\xbd\x8f\\VK\xcct\x85w\x1e\xf1\x12o\x8b4\xd3i\x83K!\x95f\xf4\xe2\xe3\xad\xc7o)c'
if not os.path.exists('notches_mem.dmp'):
    fh=open('notches_mem.dmp', 'wb')
    fh.write(notches_sample_program)
    fh.close()

Isharacomixes_sample_program='|\x01\x80\x00\x801\x80AP1\x90\x00\x80<}\xc1\x00\x04|:I\x00\x0c\x81\x84\x02\x801\x81A\x90\x00\x84B\xc0L\x80A}\xc1\x00\x04'
if not os.path.exists('hello.out'):
    fh=open('hello.out', 'wb')
    fh.write(Isharacomixes_sample_program)
    fh.close()

run_bat='''cd dcpu\njava computer/DCPU'''
if not os.path.exists('run.bat'):
    fh=open('run.bat', 'wb')
    fh.write(run_bat)
    fh.close()

filename = str(''.join(sys.argv[1:]))
print 'Running', filename
if ' ' in filename:
    os.system('copy ' + filename + ' ' + ('_'.join(filename.split())))
if not os.path.exists(filename):
    print 'File does not exist. Using default file'
    filename = 'notches_mem.dmp'

try:
    os.remove(os.getcwd()+'\\dcpu\\computer\\mem.dmp')
except WindowsError:
    print "No instance of mem.dmp exists, copying new instance"
os.system("copy %s dcpu\\computer\\mem.dmp" % filename)
try:
    os.system("run.bat")
except KeyboardInterrupt:
    time.sleep(1)
    print 'Done'
